@model List<Contracts>
@using ArtRoyalDetailing.Classes;
@using System.Security.Claims
@{
    ViewData["Title"] = "Записи клиентов";
    List<string> carClasses = ViewBag.carClasses;
    List<Users> workers = ViewBag.workers;
    List<ContractStatuses> statuses = ViewBag.contractStatuses;
    List<Services> services = ViewBag.services;
    List<ServiceType> serviceTypes = ViewBag.serviceTypes;
    List<ServicesCosts> servicesCosts = ViewBag.servicesCosts;
    List<ContractsServices> contractServices = ViewBag.contractServices;

    Pager pager = new Pager();
    int pageNo = 0;
    if (ViewBag.Pager != null)
    {
        pager = ViewBag.Pager;
        pageNo = pager.CurrentPage;
    }
}
<section id="scrollsection">
    <div class="scroll text-scroll">
        <div>
            Записи клиентов
        </div>
    </div>
</section>
<br/>
<br/>
<br/>
<br/>
<br/>
<div class="searchAppointment">
    <form method="get">
        <div class="row m-1">
            <div class="col mt-1 mb-1" style="min-width: 160px;"><input type="number" class="text-control" value="@ViewBag.AppointmentId" name="appointmentId" placeholder="Номер записи" /></div>
            <div class="col mt-1 mb-1" style="min-width: 160px;"><input type="text" class="tel text-control" value="@ViewBag.ClientNumber" name="clientNumber" placeholder="Телефон клиента" /></div>
             <div class="col mt-1 mb-1" style="min-width: 160px;">
                <input multiple type="text" class="text-control" name="dateIn" placeholder="Дата от" onfocus="(this.type='datetime-local')"  />
            </div>
            <div class="col mt-1 mb-1" style="min-width: 160px;">
                <input multiple type="text" class="text-control" name="dateOut" placeholder="Дата до" onfocus="(this.type='datetime-local')" />
            </div>
            <div class="col mt-1 mb-1" style="min-width: 160px;">
                <select class="select-control" name="appointmentStatusId">
                    <option value="" disabled selected>Статус записи</option>
                    @foreach (var status in statuses)
                    {
                        if (ViewBag.IdStatus != null && status.IdStatus == (int)ViewBag.IdStatus)
                        {
                            <option selected value="@status.IdStatus">@status.StatusName</option>
                        }
                        else
                        {
                            <option value="@status.IdStatus">@status.StatusName</option>
                        }
                    }
                </select>
            </div>
        </div>
        <div class="col mt-1 mb-1" style="min-width: 160px;">
            <button class="appointmentBtnSearch">
                Найти
            </button>
        </div>
    </form>
</div>
<div style="width:100%;display:flex;">
    <button class="appointmentAdd col-6" style="margin: 10px auto" onclick="showAppointmentAdd(true)">
        Добавить запись
    </button>
</div>
<div class="m-2 currentAppointmentToAdd" hidden>
    <div class="col appointmentDiv" style="height: auto;">
        <h4 class="text-center m-0 font-italic" style="letter-spacing: 7px;">Добавление записи</h4>
        <div class="row p-2">
        <table class="col table table-borderless text-light" style="background: #4802465b; border-radius: 20px; margin: 3px; max-height: 220px;">
            <tbody>
                <tr>
                    <td class="col-1" style="font-weight: bold; font-size: 13px; vertical-align: middle;">Номер телефона клиента</td>
                    <td class="col-2" style="min-width: 150px; vertical-align: middle;">
                        <input type="text" id="numberPhone" class="text-control tel" placeholder="Введите номер">
                    </td>
                </tr>
                <tr>
                    <td style="font-weight: bold;font-size: 13px; vertical-align: middle;">Класс автомобиля</td>
                    <td style="vertical-align: middle;">
                        <select class="select-control" id="carClass">
                            <option value="" disabled selected>Класс</option>
                            @foreach (var carClass in carClasses)
                            {
                                <option>@carClass</option>
                            }
                        </select>
                    </td>
                </tr>
                <tr>
                    <td class="col-1" style="font-weight: bold; font-size: 13px; vertical-align: middle;">Гос. номер</td>
                    <td class="col-2" style="min-width: 150px; vertical-align: middle;">
                        <input type="text" id="gosNumber" class="text-control" maxlength="6" placeholder="Введите гос.номер">
                    </td>
                </tr>
                <tr>
                    <td style="font-weight: bold; font-size: 13px; vertical-align: middle;">Статус записи</td>
                    <td style="vertical-align: middle;">
                        <select class="select-control" id="appointmentStatus">
                            <option value="" disabled selected>Статус</option>
                            @foreach (var status in statuses)
                            {
                                <option value="@status.IdStatus">@status.StatusName</option>
                            }
                        </select>
                    </td>
                </tr>
            </tbody>
        </table>
        <table class="col table table-borderless" style="background: #4802465b; border-radius: 20px;margin: 4px; height:max-content" id="tableServices">
            <thead>
                <tr class="text-center table-header">
                    <td scope="col" class="col-4" style="vertical-align: middle;"><span style="font-weight: bold;font-size: 16px;">Услуга</span></td>
                    <td scope="col" style="vertical-align: middle;"><span style="font-weight: bold;font-size: 16px;">Мойщик</span></td>
                    <td scope="col" style="vertical-align: middle;"><span style="font-weight: bold;font-size: 16px;">Стоимость (руб.)</span></td>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td colspan="4">
                        <button class="text-control p-0" style="display: flex; align-items: center; justify-content: center; margin:5px 0; " onclick="addTableRow(this)">
                            <ion-icon name="add-circle-outline"></ion-icon>
                            Добавить
                        </button>
                    </td>
                </tr>
                <tr style="height:55px;" id="tableRow" class="tbRow">
                    <td>
                        <select class="select-control" id="serviceSelect">
                            @foreach (var serviceType in serviceTypes)
                            {
                                <optgroup label="@serviceType.TypeName">
                                    @foreach (var service in services.Where(x => x.ServiceType == serviceType.IdType))
                                    {
                                        <option value="@service.IdService">@service.ServiceName</option>
                                    }
                                </optgroup>
                            }
                        </select>
                    </td>
                    <td>
                        <select class="select-control" id="workerSelect">
                            <option disabled selected value="">Мойщик</option>
                            @foreach (var worker in workers.Where(x => x.UserRole == 2))
                            {
                                <option value="@worker.UserId">@(worker.UserName + " " + worker.UserSurname)</option>
                            }
                        </select>
                    </td>
                    <td>
                        <input type="text" placeholder="Стоимость (руб.)" id="costSelect" class="text-control"/>
                    </td>
                    <td class="deleteRow">
                        <div style="cursor: pointer;" onclick="deleteRow(this)">
                            <ion-icon name="trash-outline"></ion-icon>
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
        <table class="col table table-borderless text-light" style="background: #4802465b; border-radius: 20px; margin: 3px; max-height: 220px;">
            <tbody>
                <tr>
                    <td class="col-1" style="font-weight: bold; font-size: 13px; vertical-align: middle;">Дата записи</td>
                    <td class="col-2" style="min-width: 150px;vertical-align: middle;">
                            <input type="date" class="dateToAdd text-control" value="@DateTime.Now.ToString("yyyy-MM-dd")"></input>
                    </td>
                </tr>
                <tr>
                    <td style="font-weight: bold;font-size: 13px; vertical-align: middle;">Время записи от</td>
                    <td style="vertical-align: middle;">
                            <input type="time" class="timeToAdd1 text-control" style="text-align: center; min-width:80px" readonly></input>
                    </td>
                </tr>
                <tr>
                    <td style="font-weight: bold;font-size: 13px; vertical-align: middle;">Время записи до</td>
                    <td style="vertical-align: middle;">
                            <input type="time" class="timeToAdd2 text-control" style="text-align: center; min-width:80px" readonly></input>
                    </td>
                </tr>
                <tr>
                    <td colspan="2" style="padding: 0;">
                            <button class="appointmentBtn" style="display: flex; align-items: center; justify-content: center;" onclick="timeChangeModalShow(this)">
                            Выбрать время
                        </button>
                    </td>
                </tr>
                <tr>
                    <td colspan="2" style="padding: 0;">
                        <button class="appointmentBtn" style="display: flex; align-items: center; justify-content: center;" onclick="saveAppointment(this)">
                            Сохранить
                        </button>
                    </td>
                </tr>
                <tr>
                    <td colspan="2" style="padding: 0;">
                        <button class="appointmentBtn" onclick="showAppointmentAdd(false)" style="display: flex; align-items: center; justify-content: center;">
                            Отменa
                        </button>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
</div>
</div>
@if (pager.TotalPages > 1)
{
    <div class="pages col-6" style="margin:0 auto">
        @for (var pge = pager.StartPage; pge <= pager.EndPage; pge++)
        {
            <label class="page col">
                <input type="radio" name="groupPages" @(pge == pager.CurrentPage ? "checked" : "") onchange="window.location.href='@(string.IsNullOrEmpty(Context.Request.Query["appointmentStatusId"])?$"/Appointment/AdminAppointment?page={pge}":$"/Appointment/AdminAppointment?appointmentId={Context.Request.Query["appointmentId"]}&clientNumber={Context.Request.Query["clientNumber"]}&appointmentStatusId={Context.Request.Query["appointmentStatusId"]}&page={pge}")'" />
                <div class="pageNumber">@pge</div>
            </label>
        }
    </div>
}
<div class="appointments">
    @if (Model.Count > 0)
    {
        foreach (var appointment in Model)
        {
            <div class="m-2 currentAppointment">
                <div class="col appointmentDiv" style="height: auto;">
                    <h4 class="text-center m-0 font-italic" style="letter-spacing: 7px;">Запись #@appointment.IdContract</h4>
                    <div class="row p-2">
                        <table class="col table table-borderless text-light" style="background: #4802465b; border-radius: 20px; margin: 3px; max-height: 220px;">
                            <tbody>
                                <tr>
                                    <td class="col-1" style="font-weight: bold; font-size: 13px; vertical-align: middle;">Номер телефона клиента</td>
                                    <td class="col-2" style="min-width: 150px; vertical-align: middle;"><div class="text-control">@appointment.ClientNumber</div></td>
                                </tr>
                                <tr>
                                    <td style="font-weight: bold;font-size: 13px; vertical-align: middle;">Класс автомобиля</td>
                                    <td style="vertical-align: middle;">
                                        <select class="select-control" id="carClass">
                                            <option value="" disabled>Класс</option>
                                            @foreach (var carClass in carClasses)
                                            {
                                                if (appointment.AutoClass.Contains(carClass))
                                                {
                                                    <option selected>@carClass</option>
                                                }
                                                else
                                                {
                                                    <option>@carClass</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                </tr>
                                <tr>
                                    <td class="col-1" style="font-weight: bold; font-size: 13px; vertical-align: middle;">Гос. номер</td>
                                    <td class="col-2" style="min-width: 150px; vertical-align: middle;">
                                        <input type="text" id="gosNumber" class="text-control" value="@appointment.GosNumber" maxlength="6" placeholder="Введите гос.номер">
                                    </td>
                                </tr>
                                <tr>
                                    <td style="font-weight: bold; font-size: 13px; vertical-align: middle;">Статус записи</td>
                                    <td style="vertical-align: middle;">
                                        <select class="select-control" id="appointmentStatus">
                                            <option value="" disabled selected>Статус</option>
                                            @foreach (var status in statuses)
                                            {
                                                if (appointment.StatusContract.HasValue && appointment.StatusContract.Value == status.IdStatus)
                                                {
                                                    <option selected value="@status.IdStatus">@status.StatusName</option>
                                                }
                                                else
                                                {
                                                    <option value="@status.IdStatus">@status.StatusName</option>
                                                }
                                            }
                                        </select>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <table class="col table table-borderless" style="background: #4802465b; border-radius: 20px;margin: 4px; height:max-content" id="tableServices">
                            <thead>
                                <tr class="text-center table-header">
                                    <td scope="col" class="col-4" style="vertical-align: middle;"><span style="font-weight: bold;font-size: 16px;">Услуга</span></td>
                                    <td scope="col" style="vertical-align: middle;"><span style="font-weight: bold;font-size: 16px;">Мойщик</span></td>
                                    <td scope="col" style="vertical-align: middle;"><span style="font-weight: bold;font-size: 16px;">Стоимость (руб.)</span></td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td colspan="4">
                                        <button class="text-control p-0" style="display: flex; align-items: center; justify-content: center; margin:5px 0; " onclick="addTableRow(this)">
                                            <ion-icon name="add-circle-outline"></ion-icon>
                                            Добавить
                                        </button>
                                    </td>
                                </tr>
                                @foreach (var contractService in contractServices.Where(x => x.IdContract == appointment.IdContract))
                                {
                                    <tr style="height:55px;" id="tableRow" class="tbRow">
                                        <td>
                                            <select class="select-control" id="serviceSelect">
                                                @foreach (var serviceType in serviceTypes)
                                                {
                                                    <optgroup label="@serviceType.TypeName">
                                                        @foreach (var service in services.Where(x => x.ServiceType == serviceType.IdType))
                                                        {
                                                            if (contractService.IdService == service.IdService)
                                                            {
                                                                <option selected value="@service.IdService">@service.ServiceName</option>
                                                            }
                                                            else
                                                            {
                                                                <option value="@service.IdService">@service.ServiceName</option>
                                                            }
                                                        }
                                                    </optgroup>
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            <select class="select-control" id="workerSelect">
                                                <option disabled selected value="">Мойщик</option>
                                                @foreach (var worker in workers.Where(x => x.UserRole == 2))
                                                {
                                                    if (contractService.IdWasher == worker.UserId)
                                                    {
                                                        <option selected value="@worker.UserId">@(worker.UserName + " " + worker.UserSurname)</option>
                                                    }
                                                    else
                                                    {
                                                        <option value="@worker.UserId">@(worker.UserName + " " + worker.UserSurname)</option>
                                                    }
                                                }
                                            </select>
                                        </td>
                                        <td>
                                            @foreach (var serviceCost in servicesCosts)
                                            {
                                                if (contractService.IdService == serviceCost.IdService && appointment.AutoClass.Contains(serviceCost.ClassAuto))
                                                {
                                                    <input type="text" placeholder="Стоимость (руб.)" id="costSelect" class="text-control" value="@(contractService.Cost.HasValue?contractService.Cost.Value.ToString():serviceCost.Cost)" />
                                                }
                                            }
                                        </td>
                                        <td class="deleteRow">
                                            <div style="cursor: pointer;" onclick="deleteRow(this)">
                                                <ion-icon name="trash-outline"></ion-icon>
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                        <table class="col table table-borderless text-light col-md-1" style="background: #4802465b; border-radius: 20px; margin: 3px; max-height: 220px;">
                            <tbody>
                                <tr>
                                    <td class="col-1" style="font-weight: bold; font-size: 13px; vertical-align: middle;">Дата записи</td>
                                    <td class="col-2" style="min-width: 150px;vertical-align: middle;">
                                        <input type="text" class="text-control dateToAdd" style="text-align: center; min-width:80px" id="dateAppointment" value="@appointment.DateContract.Value.ToShortDateString()" />
                                    </td>
                                </tr>

                                <tr>
                                    <td style="font-weight: bold;font-size: 13px; vertical-align: middle;">Время записи от</td>
                                    <td style="vertical-align: middle;">
                                        <input type="time" class="timeToAdd1 text-control" style="text-align: center; min-width:80px" value="@appointment.StartTime.Value.ToString(@"hh\:mm")" readonly></input>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="font-weight: bold;font-size: 13px; vertical-align: middle;">Время записи до</td>
                                    <td style="vertical-align: middle;">
                                        <input type="time" class="timeToAdd2 text-control" style="text-align: center; min-width:80px" value="@appointment.EndTime.Value.ToString(@"hh\:mm")" readonly></input>
                                    </td>
                                </tr>

                                <tr>
                                    <td colspan="2" style="padding: 0;">
                                        <button class="appointmentBtn" style="display: flex; align-items: center; justify-content: center;" onclick="timeChangeModalShow(this)">
                                            Выбрать время
                                        </button>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2" style="padding: 0;">
                                        <button class="appointmentBtn" style="display: flex; align-items: center; justify-content: center;" onclick="editAppointment(this,@appointment.IdContract)">
                                            Изменить запись
                                        </button>
                                    </td>
                                </tr>
                                <tr>
                                    <td colspan="2" style="padding: 0;">
                                        <button class="appointmentBtn" onclick="deleteAppointment(this,@appointment.IdContract)" style="display: flex; align-items: center; justify-content: center;">
                                            Отменить запись
                                        </button>
                                    </td>
                                </tr>
                                @if (appointment.StatusContract == 4)
                                {
                                    <tr>
                                        <td colspan="2" style="padding: 0;">
                                            <button class="appointmentBtn" style="display: flex; align-items: center; justify-content: center;" onclick="receiptAppointment(@appointment.IdContract)">
                                                Квитанция
                                            </button>
                                        </td>
                                    </tr>
                                }
                                @if (appointment.StatusContract == 3)
                                {
                                    <tr>
                                        <td colspan="2" style="padding: 0;">
                                            <button class="appointmentBtn" style="display: flex; align-items: center; justify-content: center;" onclick="actAppointment(@appointment.IdContract)">
                                                Акт приёма-передачи
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="defaultContainer">
            Ничего не найдено
        </div>
    }
</div>

@section Scripts{

    <script>
    let changedDate = ""
    findAncestor = (el, cls) => {
        while ((el = el.parentElement) && !el.classList.contains(cls));
        return el;
    };
    showAppointmentAdd = (bool) => {
        if(!bool)
            document.querySelector(".currentAppointmentToAdd").setAttribute("hidden","")
        else
            document.querySelector(".currentAppointmentToAdd").removeAttribute("hidden")
    }
    deleteRow=(element)=>{
        let table = findAncestor(element, 'table-borderless')
        if (table.rows.length > 3) {
            let row = findAncestor(element, 'tbRow')
            row.parentNode.removeChild(row);
        }
        else {
            createAlert('Ошибка', `У записи должна быть хотя бы одна услуга`, 'error')
        }
    }
    addTableRow = (el) => {
        let table = findAncestor(el, 'table');
        let row = table.querySelector('#tableRow')
        let rowToAdd = row.cloneNode(true)
        table.appendChild(rowToAdd)
        }
    saveAppointment = (el) => {
        let isEmpty = false
        let appointment = findAncestor(el, 'currentAppointmentToAdd')
        let autoClass = appointment.querySelector("#carClass").value
        let gosNumber = appointment.querySelector("#gosNumber").value
        let contractStatus = appointment.querySelector("#appointmentStatus").value
        let dateContract = appointment.querySelector(".dateToAdd").value
        let clientPhoneNumber = appointment.querySelector("#numberPhone").value
        let timeOt = appointment.querySelector(".timeToAdd1").value
        let timeDo = appointment.querySelector(".timeToAdd2").value
        let services = appointment.querySelectorAll('#tableRow')
        let admin = `@User.FindFirst(ClaimTypes.NameIdentifier).Value`
        var serviceList = []
        var workerList = []
        var costsList = []
        for (var i = 0; i < services.length; i++) {
            element = services[i];
            serviceList.push(element.querySelector('#serviceSelect').value)
            workerList.push(element.querySelector('#workerSelect').value)
            costsList.push(element.querySelector('#costSelect').value)
            if (element.querySelector('#workerSelect').value == "" || element.querySelector('#costSelect').value==""||element.querySelector('#serviceSelect').value=="")
                isEmpty=true
        }
        if (gosNumber == "")
            isEmpty==true
        if (isEmpty) {
            createAlert("Ошибка", "Заполните все поля", "error")
            return;
        }
        if (clientPhoneNumber.length != 17) {
            createAlert("Ошибка", "Некорректный номер телефона", "error")
            return;
        }
        if (gosNumber.length != 6) {
            createAlert("Ошибка", "Некорректный гос.номер", "error")
            return;
        }
        var model = {
            CarClass: autoClass,
            IdAdmin: admin,
            ClientNumber: clientPhoneNumber,
            GosNumber:gosNumber,
            AppointmentStatus:contractStatus,
            DateAppointment:dateContract,
            StartTime:timeOt,
            EndTime:timeDo,
            ServicesList:serviceList,
            WorkersList:workerList,
            CostList:costsList
        }
        $.ajax({
            url: '/Appointment/CreateAppointmentAdmin',
            type: "POST",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            data: model,
            async: true,
            processData: true,
            cache: false,
            success: function (data) {
                if (data.statusCode == 1)
                    createAlert('Ошибка', 'Клиент уже записан на этот день', 'error')
                if (data.statusCode == 4)
                    createAlert('Ошибка', "Неверная дата или время записи", 'error')
                if (data.statusCode == 200)
                    createAlert('Успешно', `Запись добавлена!`, 'success')
                if (data.statusCode == 400)
                    createAlert('Ошибка', `Ошибка сервера`, 'success')
                window.location.reload();
            },
            error: function (xhr) {
                createAlert('Ошибка', "Неверная дата или время записи", 'error')
            }
        });
        }
    editAppointment = (el,appointmentId) => {
        let isEmpty = false
        let appointment = findAncestor(el, 'currentAppointment')
        let contractId = appointmentId
        let autoClass = appointment.querySelector("#carClass").value
        let gosNumber = appointment.querySelector("#gosNumber").value
        let contractStatus = appointment.querySelector("#appointmentStatus").value
        let dateContract = appointment.querySelector("#dateAppointment").value
        let timeOt = appointment.querySelector(".timeToAdd1").value
        let timeDo = appointment.querySelector(".timeToAdd2").value
        let services = appointment.querySelectorAll('#tableRow')
        let admin = `@User.FindFirst(ClaimTypes.NameIdentifier).Value`
        var serviceList = []
        var workerList = []
        var costsList = []
        for (var i = 0; i < services.length; i++) {
            element = services[i];
            serviceList.push(element.querySelector('#serviceSelect').value)
            workerList.push(element.querySelector('#workerSelect').value)
            costsList.push(element.querySelector('#costSelect').value)
            if (element.querySelector('#workerSelect').value == "" || element.querySelector('#costSelect').value==""||element.querySelector('#serviceSelect').value=="")
                isEmpty = true
                var cost = parseInt(element.querySelector('#costSelect').value) || 0
            if (cost==0) {
                createAlert("Ошибка", "Проверьте стоимость услуг", "error")
                return;
            }
        }
        if (gosNumber == "")
            isEmpty == true
        if (isEmpty) {
            createAlert("Ошибка", "Заполните все поля", "error")
            return;
        }
        if (gosNumber.length != 6) {
            createAlert("Ошибка", "Некорректный гос.номер", "error")
            return;
        }
        var model = {
            AppointmentId:contractId,
            CarClass: autoClass,
            IdAdmin: admin,
            GosNumber:gosNumber,
            AppointmentStatus:contractStatus,
            DateAppointment:dateContract,
            StartTime:timeOt,
            EndTime:timeDo,
            ServicesList:serviceList,
            WorkersList:workerList,
            CostList:costsList
        }
        $.ajax({
            url: '/Appointment/EditAppointment',
            type: "POST",
            contentType: 'application/x-www-form-urlencoded; charset=utf-8',
            data: model,
            async: true,
            processData: true,
            cache: false,
            success: function (data) {
                if (data.statusCode == 0)
                    createAlert('Ошибка', 'Не найдена запись', 'error')
                if (data.statusCode == 4)
                    createAlert('Ошибка', "Неверная дата или время записи", 'error')
                if (data.statusCode == 200)
                    createAlert('Успешно', `Запись #${contractId} изменена!`, 'success')
                if (data.statusCode == 400)
                    createAlert('Ошибка', `Ошибка сервера`, 'error')
                if (data.statusCode == 5)
                        createAlert('Ошибка', `Нельзя поставить статус 'На обслуживании' в не наступишвее время`, 'error')
            },
            error: function (xhr) {
                createAlert('Ошибка', "Неверная дата или время записи", 'error')
            }
        });
        }
        deleteAppointment = (el,appointmentId) => {

            let appointment = findAncestor(el, 'currentAppointment')
            let contractId = appointmentId
            $.ajax({
                url: '@Url.Action("DeleteAppointment", "Appointment")',
                type: 'POST',
                data: { appointmentId: contractId },
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                processData: true,
                cache: false,
                async: true,
                success: function (data) {
                    if (data.data == true) {
                        createAlert('Успешно', `Запись ${contractId} отменена`, 'success')
                        appointment.parentNode.removeChild(appointment)
                    }
                    if (data.data == false)
                        createAlert('Ошибка', `Не удалось отменить запись №${contractId}`, 'error')
                },
                error: function (xhr) {
                    alert(JSON.stringify(xhr))
                    createAlert('Ошибка', "Запрос не отправлен", 'error')
                }
            });
        }
    receiptAppointment = (contractId) => {
            $.ajax({
                url: '@Url.Action("CreateReceipt", "Appointment")',
                type: 'POST',
                data: { appointmentId: contractId },
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                processData: true,
                cache: false,
                async: true,
                success: function (data) {
                    printHTML(data)
                    createAlert('Успешно', `Квитанция по записи ${contractId} сформирована`, 'success')
                },
                error: function (xhr) {
                    alert(JSON.stringify(xhr))
                    createAlert('Ошибка', "Запрос не отправлен", 'error')
                }
            });
    }
    actAppointment = (contractId) => {
            $.ajax({
                url: '@Url.Action("CreateAct", "Appointment")',
                type: 'POST',
                data: { appointmentId: contractId },
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                processData: true,
                cache: false,
                async: true,
                success: function (data) {
                    printHTML(data)
                    createAlert('Успешно', `Акт по записи ${contractId} сформирован`, 'success')
                },
                error: function (xhr) {
                    alert(JSON.stringify(xhr))
                    createAlert('Ошибка', "Запрос не отправлен", 'error')
                }
            });
        }
        window.addEventListener("DOMContentLoaded", function () {
            [].forEach.call(document.querySelectorAll('.tel'), function (input) {
                var keyCode;
                function mask(event) {
                    event.keyCode && (keyCode = event.keyCode);
                    var pos = this.selectionStart;
                    if (pos < 3) event.preventDefault();
                    var matrix = "+7 (___) ___-____",
                        i = 0,
                        def = matrix.replace(/\D/g, ""),
                        val = this.value.replace(/\D/g, ""),
                        new_value = matrix.replace(/[_\d]/g, function (a) {
                            return i < val.length ? val.charAt(i++) || def.charAt(i) : a
                        });
                    i = new_value.indexOf("_");
                    if (i != -1) {
                        i < 5 && (i = 3);
                        new_value = new_value.slice(0, i)
                    }
                    var reg = matrix.substr(0, this.value.length).replace(/_+/g,
                        function (a) {
                            return "\\d{1," + a.length + "}"
                        }).replace(/[+()]/g, "\\$&");
                    reg = new RegExp("^" + reg + "$");
                    if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = new_value;
                    if (event.type == "blur" && this.value.length < 5) this.value = ""
                }

                input.addEventListener("input", mask, false);
                input.addEventListener("focus", mask, false);
                input.addEventListener("blur", mask, false);
                input.addEventListener("keydown", mask, false)

            });
        });
        var editElement=null
        timeChangeModalShow = (button) => {
            var tbody = button.parentNode.parentNode.parentNode
            let dated = tbody.querySelector(".dateToAdd").value
            $.ajax({
                url: '/Appointment/GetTimeModal',
                type: 'POST',
                data: { date: dated },
                contentType: 'application/x-www-form-urlencoded; charset=utf-8',
                processData: true,
                cache: false,
                async: true,
                success: function (data) {
                    $('#formodalAuthReg').html(data);
                    editElement=tbody
                },
                error: function (xhr) {
                    alert(JSON.stringify(xhr))
                    createAlert('Ошибка', "Запрос не отправлен", 'error')
                }
            });
        }
        changeTime = (elem) => {
            editElement.querySelector(".timeToAdd1").value = elem.innerHTML.split(' - ')[0]
            editElement.querySelector(".timeToAdd2").value = elem.innerHTML.split(' - ')[1]
            closeModal()
        }
    </script>
}