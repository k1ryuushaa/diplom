@model ArtRoyalDetailing.Domain.ViewModels.RegisterViewModel
@{
    Layout = "_Layout";
    ViewBag.Title = "Регистрация";
}
<div class="auth-modal">
    <div class="backDepth" onclick="closeModal()"></div>
    <form autocomplete="on" method="post" asp-controller="Account" asp-action="Register">
        <h3>Регистрация</h3>
        <div asp-validation-summary="All" style="font-size:15px;" class="text-danger"></div>
        <input type="text" placeholder="Фамилия" id="username" name="Surname" asp-for="Surname">
        <input type="text" placeholder="Имя" id="username" name="Name" asp-for="Name">
        <input type="text" placeholder="Логин" id="username" name="Login" asp-for="Login">
        <input type="text" placeholder="Номер телефона" id="username" onfocus="maskValid(this)" asp-for="PhoneNumber" name="PhoneNumber">
        <input type="text" placeholder="Электронная почта" id="username" asp-for="Email" name="Email">
        <div class="passwordBox">
            <input type="password" placeholder="Пароль" asp-for="Password" id="password">
            <ion-icon name="eye-outline" id="eye" onclick="showPass()"></ion-icon>
        </div>
        <button type="submit">Регистрация</button>
    </form>
</div>

    <script>
        closeModal = () => {
            document.querySelector('.backDepth').parentElement.innerHTML = ''
        }
        let passs = true
        showPass = () => {
            if (passs) {
                document.querySelector('#password').setAttribute('type', 'text')
                passs = !passs
            }
            else {
                document.querySelector('#password').setAttribute('type', 'password')
                passs = !passs
            }

        }
        maskValid = (input) => {
            var keyCode;
            function mask(event) {
                event.keyCode && (keyCode = event.keyCode);
                var pos = this.selectionStart;
                if (pos < 3) event.preventDefault();
                var matrix = "+7 (___) ___-____",
                    i = 0,
                    def = matrix.replace(/\D/g, ""),
                    val = this.value.replace(/\D/g, ""),
                    new_value = matrix.replace(/[_\d]/g, function (a) {
                        return i < val.length ? val.charAt(i++) || def.charAt(i) : a
                    });
                i = new_value.indexOf("_");
                if (i != -1) {
                    i < 5 && (i = 3);
                    new_value = new_value.slice(0, i)
                }
                var reg = matrix.substr(0, this.value.length).replace(/_+/g,
                    function (a) {
                        return "\\d{1," + a.length + "}"
                    }).replace(/[+()]/g, "\\$&");
                reg = new RegExp("^" + reg + "$");
                if (!reg.test(this.value) || this.value.length < 5 || keyCode > 47 && keyCode < 58) this.value = new_value;
                if (event.type == "blur" && this.value.length < 5) this.value = ""
            }

            input.addEventListener("input", mask, false);
            input.addEventListener("focus", mask, false);
            input.addEventListener("blur", mask, false);
            input.addEventListener("keydown", mask, false)

        }
    </script>